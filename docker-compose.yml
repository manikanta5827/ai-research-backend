
services:
  postgres:
    image: postgres:15-alpine
    container_name: ai-research-postgres
    environment:
      POSTGRES_DB: ai_research
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ai-research-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_research"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ai-research-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-research-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  fastapi-server:
    build:
      context: ./python-service
      dockerfile: Dockerfile.fastapiserver
    container_name: ai-research-fastapi
    ports:
      - "8000:8000"
    networks:
      - ai-research-network
    restart: unless-stopped

  nodejs-server:
    build:
      context: .
      dockerfile: Dockerfile.nodejsserver
    container_name: ai-research-nodejs
    ports:
      - "4000:4000"
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ai_research
      REDIS_HOST_URL: redis
      FAST_API_MICROSERVICE_PATH: http://fastapi-server:8000
      PORT: 4000
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    networks:
      - ai-research-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      fastapi-server:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  ai-research-network:
    driver: bridge
